Maximum profit from sale of wines(Recursive)

Given n wines in a row, with integers denoting the cost 
of each wine respectively. Each year you can sale 
the first or the last wine in the row. 

However, the price of wines increases over time.

Let the initial profits from the wines be 
P1, P2, P3…Pn. On the Yth year, the profit from the
ith wine will be Y*Pi. For each year, your task is
to print “beg” or “end” denoting whether first or
last wine should be sold. 

Also, calculate the maximum profit from all the
 wines.

#include <iostream>

using namespace std;
int fun(int a[],int begin,int end,int lvl)
{
    if(begin==end)
    {
        return lvl*a[begin];
    }
    
    return max(lvl*a[begin]+fun(a,begin+1,end,lvl+1),lvl*a[end]+fun(a,begin,end-1,lvl+1));
}

int main()
{
    int arr[]={2,4,6,2,5};
    int n=sizeof(arr)/sizeof(arr[0]);
    
    int i;
    
    int ans=fun(arr,0,n-1,1);
    cout<<"max cost: "<<ans;

    return 0;
}
