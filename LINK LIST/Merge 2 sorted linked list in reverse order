Merge 2 sorted linked list in reverse order
Given two linked lists of size N and M, which are sorted in non-decreasing order. The task is to merge them in such a way that the resulting list is in decreasing order.
Input:
First line of input contains number of testcases T. For each testcase, first line of input conatains length of both linked lists N and M respectively. Next two lines contains N and M elements of two linked lists.
Output:
For each testcase, print the merged linked list which is in non-increasing order.
User Task:
The task is to complete the function mergeResult() which takes reference to the heads of both linked list and returns the pointer to the merged linked list.
Constraints:
1 <=T<= 50
1 <= N, M <= 1000
Example:
Input:
2
4 3
5 10 15 40 
2 3 20
2 2
1 1
2 4
Output:
40 20 15 10 5 3 2
4 2 1 1 
Explanation:
Testcase 1: After merging the two lists in decreasing order, we have new lists as 40->20->15->10->5->3->2.





struct Node * mergeResult(Node *a,Node *b)
{
   
   Node* res=NULL;
   
   while(a!=NULL && b!=NULL)
   {
       if(a->data<=b->data)
       {
           // Make changes
           Node* temp=a->next; // in order to seprate the curr reqd node
           
           a->next=res;  // to combine the curr node in resultant list
           
           //Now settle everything back
           res=a;
           a=temp; // Updated a 
           
       }
       else{
           
           Node* temp=b->next;
           
           b->next=res;
           
           res=b;
           b=temp;
       }
   }
   
   
   while(a!=NULL)
   {
       Node* temp=a->next; // in order to seprate the curr reqd node
           
           a->next=res;  // to combine the curr node in resultant list
           
           //Now settle everything back
           res=a;
           a=temp; // Updated a 
   }
   
   while(b!=NULL)
   {
       
           Node* temp=b->next;
           
           b->next=res;
           
           res=b;
           b=temp;
   }
   
   
   return res;
   
}
