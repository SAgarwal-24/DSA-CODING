Reverse a linked list

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1 <= T <= 100
1 <= N <= 104

Example:
Input:
2
6
1 2 3 4 5 6
5
2 7 8 9 10
Output:
6 5 4 3 2 1
10 9 8 7 2

Explanation:
Testcase 1: After reversing the list, elements are 6->5->4->3->2->1.
Testcase 2: After reversing the list, elements are 10->9->8->7->2.

struct Node* reverseList(struct Node *head)
{
    
    if(head==NULL)
    return head;
    
    Node* p1=NULL;
    Node* p2=head;
    Node* p3=p2->next;
    
   
    while(p2!=NULL)
    {
        p2->next=p1;
        p1=p2;
        p2=p3;
        
        if(p3!=NULL)
        p3=p3->next;
        
    }
    
    head=p1;
    return head;
}


//Editorial
void reverse()
    {
        // Initialize current, previous and
        // next pointers
        Node* current = head;
        Node *prev = NULL, *next = NULL;

        while (current != NULL) {
            // Store next
            next = current->next;

            // Reverse current node's pointer
            current->next = prev;

            // Move pointers one position ahead.
            prev = current;
            current = next;
        }
        head = prev;
    }
