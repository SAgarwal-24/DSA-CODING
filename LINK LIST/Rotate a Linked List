Rotate a Linked List 
Given a singly linked list of size N. The task is to rotate the linked list counter-clockwise by k nodes, where k is a given positive integer smaller than or equal to length of the linked list
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).
Constraints:
1 <= T <= 100
1 <= N <= 103
1 <= k <= 103
Example:
Input:
2
8
1 2 3 4 5 6 7 8
4
5
2 4 7 8 9
3
Output:
5 6 7 8 1 2 3 4
8 9 2 4 7

Corner Case:
Input:
1
9
9 8 6 19 12 3 26 18 5
9
Output:
9 8 6 19 12 3 26 18 5

Explanation:
Testcase 1: After rotating the linked list by 4 elements (anti-clockwise), we reached to node 5, which is (k+1)th node from beginning, now becomes head and tail of the linked list is joined to the previous head.
Testcase 2: After rotating the linked list by 3 elements (anti-clockwise), we will get the resulting linked list as 8 9 2 4 7.


void print(Node* head)
{
    while(head!=NULL)
    {
        cout<<head->data<<" ";
        head=head->next;
    }
    
    cout<<"\n";
}
Node* rotate(Node* head, int k)
{
    Node* start=head;
    Node* temp=head;
    Node* end;
    int f=0;
    
    while(temp->next!=NULL)
    {
        k--;
        
        if(k==0)
        {
            f++;
            end=temp;
        }
        
        temp=temp->next;
        
    }
    
    if(f>0)
    {
        head=end->next;
        end->next=NULL;
        temp->next=start;
    }
    
    
    
   // print(head);
    return head;
}
